// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © derassom

//@version=6
indicator("Trade PnL Tracker", overlay=true, max_boxes_count=500)

// ──────────────────────────────
// Global Constants & Inputs
// ──────────────────────────────
trackedTickersCount = 2
trackedTradesCount   = 3

tradeFee = input.float(title="Trade Fee (%)", defval=0.1, step=0.01)
feeMultiplier = (tradeFee / 100) * 2

// Toggle display for objects.
displayTradeObjects     = input.bool(true, title="Display Trade Lines & Labels")
displayBreakEvenObjects = input.bool(true, title="Display Break Even Lines & Labels")

// Boolean to decide whether to filter objects by the default range (200 bars) or show everything.
filterByRange = input.bool(title="Filter by Default Range (200 bars)", defval=true)

// ──────────────────────────────
// Automatic Visible Range Calculation
// ──────────────────────────────
maxLookback = 200
dynamicLookback = math.min(maxLookback, bar_index + 1)
hugeVal = 1e20 // Use a very large number in place of infinity.
visibleLow  = filterByRange ? ta.lowest(low, dynamicLookback) : -hugeVal
visibleHigh = filterByRange ? ta.highest(high, dynamicLookback) : hugeVal

// ──────────────────────────────
// Global Arrays for Trade Data
// ──────────────────────────────
var tickers = array.new_string()
var entries = array.new_float()
var sizes   = array.new_float()

// ──────────────────────────────
// Helper: Add Ticker Data
// ──────────────────────────────
f_addTickerData(_ticker, _entry1, _size1, _entry2, _size2, _entry3, _size3) =>
    array.push(tickers, _ticker)
    array.push(entries, _entry1)
    array.push(sizes, _size1)
    array.push(entries, _entry2)
    array.push(sizes, _size2)
    array.push(entries, _entry3)
    array.push(sizes, _size3)

// ──────────────────────────────
// Ticker Inputs
// ──────────────────────────────
ticker1  = input.symbol(title="Ticker 1", defval="BINANCE:SOLUSDT")
entry1_1 = input.price(title="Entry 1", defval=0, inline="ticker_1_trade1")
size1_1  = input.float(title="Size 1", defval=0, inline="ticker_1_trade1")
entry1_2 = input.price(title="Entry 2", defval=0, inline="ticker_1_trade2")
size1_2  = input.float(title="Size 2", defval=0, inline="ticker_1_trade2")
entry1_3 = input.price(title="Entry 3", defval=0, inline="ticker_1_trade3")
size1_3  = input.float(title="Size 3", defval=0, inline="ticker_1_trade3")

ticker2  = input.symbol(title="Ticker 2", defval="BINANCE:ETHUSDT")
entry2_1 = input.price(title="Entry 1", defval=0, inline="ticker_2_trade1")
size2_1  = input.float(title="Size 1", defval=0, inline="ticker_2_trade1")
entry2_2 = input.price(title="Entry 2", defval=0, inline="ticker_2_trade2")
size2_2  = input.float(title="Size 2", defval=0, inline="ticker_2_trade2")
entry2_3 = input.price(title="Entry 3", defval=0, inline="ticker_2_trade3")
size2_3  = input.float(title="Size 3", defval=0, inline="ticker_2_trade3")

if barstate.isfirst
    f_addTickerData(ticker1, entry1_1, size1_1, entry1_2, size1_2, entry1_3, size1_3)
    f_addTickerData(ticker2, entry2_1, size2_1, entry2_2, size2_2, entry2_3, size2_3)

// ──────────────────────────────
// Global Arrays for Graphical Objects (Pre-Allocated)
// ──────────────────────────────
var entryLines          = array.new_line()   // one per trade
var entryLineLabels     = array.new_label()  // one per trade
var breakEvenLines      = array.new_line()   // one per ticker
var breakEvenLineLabels = array.new_label()  // one per ticker

if barstate.isfirst
    for tickerIndex = 0 to trackedTickersCount - 1
        array.push(breakEvenLines, na)
        array.push(breakEvenLineLabels, na)
    for tickerIndex = 0 to trackedTickersCount - 1
        for tradeIndex = 0 to trackedTradesCount - 1
            array.push(entryLines, na)
            array.push(entryLineLabels, na)

// ──────────────────────────────
// Helper Functions for Graphical Objects
// ──────────────────────────────
f_createTradeLine(_price, _labelString, _labelTextColor) =>
    l = line.new(bar_index, _price, bar_index + 1, _price, extend=extend.both, color=color.blue, style=line.style_dotted)
    lbl = label.new(bar_index, _price, _labelString, textcolor=_labelTextColor, color=color.rgb(23,54,133), size=size.normal, style=label.style_label_left)
    [l, lbl]

f_updateTradeLine(_line, _label, _price, _labelString, _labelTextColor) =>
    line.set_xy1(_line, bar_index, _price)
    line.set_xy2(_line, bar_index + 1, _price)
    label.set_xy(_label, bar_index + 5, _price)
    label.set_text(_label, _labelString)
    label.set_textcolor(_label, _labelTextColor)

f_handleTradeLine(_idx, _price, _labelString, _labelTextColor) =>
    // Check each bar if the trade's true price is within the visible range.
    if _price >= visibleLow and _price <= visibleHigh and displayTradeObjects
        tLine  = array.get(entryLines, _idx)
        tLabel = array.get(entryLineLabels, _idx)
        if na(tLine) or na(tLabel)
            [newLine, newLabel] = f_createTradeLine(_price, _labelString, _labelTextColor)
            array.set(entryLines, _idx, newLine)
            array.set(entryLineLabels, _idx, newLabel)
        else
            f_updateTradeLine(tLine, tLabel, _price, _labelString, _labelTextColor)
    else
        // Delete objects if out-of-range.
        tLine  = array.get(entryLines, _idx)
        tLabel = array.get(entryLineLabels, _idx)
        if not na(tLine)
            line.delete(tLine)
            array.set(entryLines, _idx, na)
        if not na(tLabel)
            label.delete(tLabel)
            array.set(entryLineLabels, _idx, na)

f_createBreakEvenLine(_price) =>
    l = line.new(bar_index, _price, bar_index + 1, _price, extend=extend.both, color=color.rgb(194,128,32), style=line.style_dotted)
    lbl = label.new(bar_index, _price, "Break Even", color=color.rgb(194,128,32), size=size.normal, style=label.style_label_left)
    [l, lbl]

f_updateBreakEvenLine(_line, _label, _price) =>
    line.set_xy1(_line, bar_index, _price)
    line.set_xy2(_line, bar_index + 1, _price)
    label.set_xy(_label, bar_index + 5, _price)

f_handleBreakEvenLine(_tickerIndex, _price) =>
    if _price >= visibleLow and _price <= visibleHigh and displayBreakEvenObjects
        beLine  = array.get(breakEvenLines, _tickerIndex)
        beLabel = array.get(breakEvenLineLabels, _tickerIndex)
        if na(beLine) or na(beLabel)
            [newLine, newLabel] = f_createBreakEvenLine(_price)
            array.set(breakEvenLines, _tickerIndex, newLine)
            array.set(breakEvenLineLabels, _tickerIndex, newLabel)
        else
            f_updateBreakEvenLine(beLine, beLabel, _price)
    else
        beLine  = array.get(breakEvenLines, _tickerIndex)
        beLabel = array.get(breakEvenLineLabels, _tickerIndex)
        if not na(beLine)
            line.delete(beLine)
            array.set(breakEvenLines, _tickerIndex, na)
        if not na(beLabel)
            label.delete(beLabel)
            array.set(breakEvenLineLabels, _tickerIndex, na)

// ──────────────────────────────
// Create the PnL Table (updates each bar)
// ──────────────────────────────
tableRowsCount = 5
var pnlTable = table.new(position.bottom_right, tableRowsCount + 1, trackedTickersCount + 1, border_width=0)
var filledRows = 0
var totalPnl = 0.0

// ──────────────────────────────
// Main Loop: Process Each Ticker (runs each bar)
// ──────────────────────────────
for tickerIndex = 0 to trackedTickersCount - 1
    if (tickerIndex == 0)
        totalPnl := 0.0
        filledRows := 0

    accumulatedEntryPrice = 0.0
    totalPositionSize     = 0.0
    baseIndex = tickerIndex * trackedTradesCount  // starting index for trades of this ticker

    // Aggregate entry data for this ticker.
    for tradeIndex = 0 to trackedTradesCount - 1
        idx = baseIndex + tradeIndex
        tradeSize  = array.get(sizes, idx)
        tradeEntry = array.get(entries, idx)
        if tradeSize != 0 and tradeEntry != 0
            totalPositionSize     += tradeSize
            accumulatedEntryPrice += tradeEntry * tradeSize

    if totalPositionSize == 0 or accumulatedEntryPrice == 0
        continue  // Skip ticker if no valid trades

    averageEntryPrice  = accumulatedEntryPrice / totalPositionSize
    tickerSymbol       = array.get(tickers, tickerIndex)
    currentTickerPrice = request.security(tickerSymbol, timeframe.period, close)
    isCurrentTicker    = (tickerSymbol == ticker.standard())

    fullTradeFee        = averageEntryPrice * feeMultiplier
    totalBreakEvenPrice = averageEntryPrice + fullTradeFee
    totalSymbolPnl = 0.0

    // Process each trade for the ticker.
    for tradeIndex = 0 to trackedTradesCount - 1
        idx = baseIndex + tradeIndex
        tradeSize  = array.get(sizes, idx)
        tradeEntry = array.get(entries, idx)
        if tradeSize == 0 or tradeEntry == 0
            continue

        tradeBreakEvenPrice = tradeEntry + fullTradeFee
        tradePnl = (currentTickerPrice - tradeBreakEvenPrice) * tradeSize
        totalSymbolPnl += tradePnl
        totalPnl += tradePnl

        if isCurrentTicker
            labelString = "Bought " + (tradeSize > 0 ? "+" : "-") +
                          str.tostring(tradeSize) +
                          " | P&L " + (tradePnl > 0 ? "+" : "") +
                          str.tostring(tradePnl, format.mintick)
            labelTextColor = tradePnl > 0 ? color.green : color.red
            f_handleTradeLine(idx, tradeEntry, labelString, labelTextColor)

    // Process break-even line for the ticker.
    if isCurrentTicker
        f_handleBreakEvenLine(tickerIndex, totalBreakEvenPrice)

    // Prepare ticker name for table display (strip broker prefix).
    tickerParts = str.split(tickerSymbol, ":")
    cleanTickerName = array.size(tickerParts) > 1 ? array.get(tickerParts, 1) : tickerSymbol

    startingRow = tickerIndex
    table.cell(pnlTable, 0, startingRow, cleanTickerName, text_color=color.gray, text_size=size.small)
    posSizeStr = (totalPositionSize > 0 ? "+" : "-") + str.tostring(totalPositionSize, format.mintick)
    table.cell(pnlTable, 1, startingRow, posSizeStr, text_color=color.green, text_size=size.small)
    avgEntryStr = "@" + str.tostring(averageEntryPrice, format.mintick)
    table.cell(pnlTable, 2, startingRow, avgEntryStr, text_color=color.gray, text_size=size.small)
    table.cell(pnlTable, 3, startingRow, "P&L", text_color=color.gray, text_size=size.small)
    pnlStr = (totalSymbolPnl > 0 ? "+" : "") + str.tostring(totalSymbolPnl, format.mintick)
    pnlColor = totalSymbolPnl > 0 ? color.green : color.red
    table.cell(pnlTable, 4, startingRow, pnlStr, text_color=pnlColor, text_size=size.small)

    table.cell(pnlTable, 5, 0, "    ", text_size=size.small)
    filledRows += 1

if filledRows == 0
    var settingsTable = table.new(position.bottom_right, 2, 1)
    table.cell(settingsTable, 0, 0, "⚙️ PnL", text_color=color.white, bgcolor=color.blue, text_size=size.small)
    table.cell(settingsTable, 1, 0, "    ", text_size=size.small)
else if filledRows > 1
    table.cell(pnlTable, 3, filledRows, "Total", text_color=color.gray, text_size=size.small)
    totalPnlStr = (totalPnl > 0 ? "+" : "") + str.tostring(totalPnl, format.mintick)
    totalPnlColor = totalPnl > 0 ? color.green : color.red
    table.cell(pnlTable, 4, filledRows, totalPnlStr, text_color=totalPnlColor, text_size=size.small)
